```mermaid
graph TB
    %% Core Layer Overview
    subgraph CoreDaemon["metal/core Service (metald)"]
        direction TB
        
        %% Main Server Component
        subgraph Server["Server Component"]
            httpServer["HTTP Server"]
            routes["Route Handler"]
            middleware["Auth/Security Middleware"]
            validation["Request Validation"]
            
            httpServer --> routes
            routes --> middleware
            middleware --> validation
        end

        %% State Management
        subgraph State["State Management"]
            deviceState["Device State"]
            stateSync["State Synchronization"]
            persistence["State Persistence"]
            
            deviceState --> stateSync
            stateSync --> persistence
        end

        %% Policy Engine
        subgraph Policy["Policy Engine"]
            policyMgr["Policy Manager"]
            ruleEngine["Rule Engine"]
            constraints["Physical Constraints"]
            
            policyMgr --> ruleEngine
            ruleEngine --> constraints
        end

        %% Hardware Integration
        subgraph HWIntegration["Hardware Integration"]
            hwManager["Hardware Manager"]
            subsystems["Subsystem Controllers"]
            monitoring["Hardware Monitoring"]
            
            hwManager --> subsystems
            hwManager --> monitoring
        end

        %% Security Layer
        subgraph Security["Security Layer"]
            authN["Authentication"]
            authZ["Authorization"]
            audit["Audit Trail"]
            encryption["Data Encryption"]
            
            authN --> authZ
            authZ --> audit
            audit --> encryption
        end

        %% Event System
        subgraph Events["Event System"]
            eventBus["Event Bus"]
            handlers["Event Handlers"]
            queue["Event Queue"]
            
            eventBus --> handlers
            handlers --> queue
        end
    end

    %% External Interfaces
    subgraph ExternalSystems["External Systems"]
        hwLayer["metal/hw Layer"]
        fleetMgr["fleet/ Layer"]
        userAPI["user/api Layer"]
        diagnostics["metal/diag"]
    end

    %% Integration Flows
    hwLayer <--> hwManager
    fleetMgr <--> httpServer
    userAPI <--> httpServer
    diagnostics <--> monitoring

    %% Event Flows
    hwManager --> eventBus
    eventBus --> fleetMgr

    %% Policy Flows
    policyMgr --> hwManager
    fleetMgr --> policyMgr

    %% State Flows
    hwManager --> deviceState
    deviceState --> fleetMgr

    %% Style Definitions
    classDef primary fill:#f9f,stroke:#333,stroke-width:2px
    classDef secondary fill:#bbf,stroke:#333,stroke-width:1px
    classDef external fill:#fbb,stroke:#333,stroke-width:2px
    classDef security fill:#bfb,stroke:#333,stroke-width:1px

    class httpServer,hwManager,policyMgr primary
    class eventBus,deviceState,subsystems secondary
    class hwLayer,fleetMgr,userAPI external
    class authN,authZ,encryption security

    %% Notes
    subgraph Notes["Key Architecture Notes"]
        note1["1. Central Coordination Point"]
        note2["2. Physical-First Policy Enforcement"]
        note3["3. Hardware Safety Guarantees"]
        note4["4. Real-time State Management"]
    end
```