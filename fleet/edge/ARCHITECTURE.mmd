```mermaid
graph TB
    %% Edge Agent Overview
    subgraph EdgeAgent["Fleet Edge (fleet/edge)"]
        direction TB
        
        %% Core Agent
        subgraph Agent["Edge Agent"]
            controller["Agent Controller"]
            stateManager["Local State"]
            configManager["Config Manager"]
            healthMonitor["Health Monitor"]
            
            controller --> stateManager
            controller --> configManager
            controller --> healthMonitor
        end

        %% Local Operations
        subgraph LocalOps["Local Operations"]
            metalIntegration["Metal Integration"]
            localExec["Command Executor"]
            localScheduler["Local Scheduler"]
            resourceMgr["Resource Manager"]
            
            metalIntegration --> localExec
            localExec --> localScheduler
            localScheduler --> resourceMgr
        end

        %% Physical Management
        subgraph PhysicalMgmt["Physical Management"]
            powerControl["Power Control"]
            thermalMgmt["Thermal Management"]
            networkControl["Network Control"]
            storageControl["Storage Control"]
            physicalState["Physical State"]
            
            powerControl --> physicalState
            thermalMgmt --> physicalState
            networkControl --> physicalState
            storageControl --> physicalState
        end

        %% Communication
        subgraph Comms["Communication"]
            brainSync["Brain Sync"]
            p2pComms["P2P Communication"]
            meshNet["Mesh Networking"]
            failover["Failover Handler"]
            
            brainSync --> p2pComms
            p2pComms --> meshNet
            meshNet --> failover
        end

        %% Local Intelligence
        subgraph LocalBrain["Local Intelligence"]
            decisions["Local Decisions"]
            cache["Decision Cache"]
            rules["Local Rules"]
            limits["Physical Limits"]
            
            decisions --> cache
            decisions --> rules
            rules --> limits
        end
    end

    %% External Systems
    subgraph ExternalSystems["External Systems"]
        brain["fleet/brain"]
        metal["metal/ Layer"]
        sync["fleet/sync"]
        otherEdges["Other Edge Agents"]
    end

    %% Physical Hardware
    subgraph Hardware["Physical Hardware"]
        cpu["CPU/Memory"]
        storage["Storage"]
        network["Network"]
        sensors["Sensors"]
    end

    %% Integration Flows
    brain <--> brainSync
    metal <--> metalIntegration
    sync <--> p2pComms
    otherEdges <--> meshNet

    %% Hardware Flows
    cpu --> resourceMgr
    storage --> storageControl
    network --> networkControl
    sensors --> physicalState

    %% Decision Flows
    brain --> decisions
    decisions --> localExec
    rules --> powerControl
    limits --> thermalMgmt

    %% Style Definitions
    classDef core fill:#f9f,stroke:#333,stroke-width:2px
    classDef physical fill:#fbb,stroke:#333,stroke-width:2px
    classDef comm fill:#bbf,stroke:#333,stroke-width:1px
    classDef local fill:#bfb,stroke:#333,stroke-width:1px

    class controller,stateManager core
    class powerControl,thermalMgmt,physicalState physical
    class brainSync,p2pComms,meshNet comm
    class decisions,rules,limits local

    %% Notes
    subgraph Notes["Edge Principles"]
        note1["1. Local Autonomy"]
        note2["2. Physical Safety"]
        note3["3. Resource Management"]
        note4["4. Failover Capability"]
    end

    %% Error Handling
    subgraph ErrorHandling["Error Handling"]
        localRecovery["Local Recovery"]
        errorReporting["Error Reporting"]
        safeMode["Safe Mode"]
        
        localRecovery --> errorReporting
        errorReporting --> safeMode
    end
```