```mermaid
graph TB
    %% Fleet Brain Overview
    subgraph FleetBrain["Fleet Brain (fleet/brain)"]
        direction TB
        
        %% Core Coordinator
        subgraph Coordinator["Core Coordinator"]
            scheduler["Task Scheduler"]
            orchestrator["Fleet Orchestrator"]
            stateManager["State Manager"]
            policyEngine["Policy Engine"]
            
            scheduler --> orchestrator
            orchestrator --> stateManager
            stateManager --> policyEngine
            policyEngine --> scheduler
        end

        %% Device Management
        subgraph DeviceManager["Device Management"]
            inventory["Device Inventory"]
            topology["Physical Topology"]
            groups["Device Groups"]
            location["Location Manager"]
            
            inventory --> topology
            topology --> groups
            groups --> location
        end

        %% Physical Operations
        subgraph PhysicalOps["Physical Operations"]
            powerMgmt["Power Management"]
            thermalControl["Thermal Control"]
            maintenance["Maintenance Planner"]
            deployment["Physical Deployment"]
            
            powerMgmt --> thermalControl
            thermalControl --> maintenance
            maintenance --> deployment
        end

        %% Decision Engine
        subgraph Decisions["Decision Engine"]
            analyzer["Situation Analyzer"]
            optimizer["Resource Optimizer"]
            loadBalancer["Load Balancer"]
            placer["Device Placer"]
            
            analyzer --> optimizer
            optimizer --> loadBalancer
            loadBalancer --> placer
        end

        %% Knowledge Base
        subgraph Knowledge["Knowledge Base"]
            models["Device Models"]
            metrics["Historical Metrics"]
            patterns["Usage Patterns"]
            constraints["Physical Constraints"]
            
            models --> metrics
            metrics --> patterns
            patterns --> constraints
        end
    end

    %% External Systems
    subgraph ExternalSystems["External Systems"]
        edge["fleet/edge"]
        sync["fleet/sync"]
        metal["metal/ Layer"]
        user["user/ Layer"]
    end

    %% Physical World
    subgraph PhysicalWorld["Physical Environment"]
        racks["Server Racks"]
        power["Power Systems"]
        cooling["Cooling Systems"]
        network["Network Infrastructure"]
    end

    %% Integration Flows
    edge <--> orchestrator
    sync <--> stateManager
    metal <--> powerMgmt
    user <--> inventory

    %% Physical Flows
    racks --> topology
    power --> powerMgmt
    cooling --> thermalControl
    network --> deployment

    %% Decision Flows
    PhysicalWorld --> analyzer
    analyzer --> deployment
    optimizer --> powerMgmt
    placer --> location

    %% Knowledge Flows
    metrics --> analyzer
    constraints --> optimizer
    patterns --> loadBalancer
    models --> placer

    %% Style Definitions
    classDef core fill:#f9f,stroke:#333,stroke-width:2px
    classDef manager fill:#bbf,stroke:#333,stroke-width:1px
    classDef physical fill:#fbb,stroke:#333,stroke-width:2px
    classDef decision fill:#bfb,stroke:#333,stroke-width:1px

    class scheduler,orchestrator,stateManager core
    class inventory,powerMgmt,thermalControl manager
    class racks,power,cooling,network physical
    class analyzer,optimizer,loadBalancer decision

    %% Notes
    subgraph Notes["Brain Principles"]
        note1["1. Physical-First Decisions"]
        note2["2. Environmental Awareness"]
        note3["3. Resource Optimization"]
        note4["4. Safety Guarantees"]
    end
```