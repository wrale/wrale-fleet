#!/usr/bin/env bash
set -euo pipefail

# Determine the script's actual location to find our library files
# This ensures our tool works correctly regardless of where it's called from
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
LIB_DIR="${SCRIPT_DIR}/lib"

# Source our core libraries
# The common.sh file provides shared functions like logging and validation
source "${LIB_DIR}/common.sh"

# Source all persona implementations
# Each persona (sysadmin, developer, operator) has its own implementation file
# containing commands and workflows specific to that role
for persona_file in "${LIB_DIR}/personas/"*.sh; do
    [[ -f "$persona_file" ]] || continue  # Skip if no files match
    source "$persona_file"
done

# Display comprehensive help text explaining the tool's capabilities
# and providing examples of common usage patterns
function show_help() {
    cat << EOF
Wrale Fleet Management Demo Tool

Usage:
    wfdemo <persona> <command> [options]
    wfdemo demo <persona> <scenario> [options]

Personas:
    sysadmin    - System Administrator workflows
    developer   - Developer and integration workflows
    operator    - Operations team workflows

Common Commands:
    device      - Device management operations
    config      - Configuration management
    demo        - Run pre-built demonstration scenarios

Examples:
    # Basic device management
    wfdemo sysadmin device register demo-device-1
    wfdemo sysadmin device status demo-device-1

    # Run a demo scenario
    wfdemo demo sysadmin stage1

    # Interactive demo with pauses and explanations
    wfdemo demo sysadmin stage1 --interactive

EOF
}

# Main command dispatcher
# This function handles command-line argument parsing and routes
# commands to the appropriate handler based on the selected persona
function main() {
    # Show help if no arguments or help requested
    if [[ $# -eq 0 || "$1" == "-h" || "$1" == "--help" ]]; then
        show_help
        exit 0
    fi

    # Extract the persona and command from arguments
    local persona="$1"
    shift
    local command="$1"
    shift

    # Handle demo scenarios specially since they have a different
    # command structure (demo <persona> <scenario>)
    if [[ "$persona" == "demo" ]]; then
        if [[ $# -lt 1 ]]; then
            error "Missing demo persona and scenario"
            show_help
            exit 1
        fi
        run_demo_scenario "$@"
        exit $?
    fi

    # Validate persona and dispatch to the appropriate handler
    case "$persona" in
        sysadmin|developer|operator)
            # Each persona has a handler function defined in its implementation file
            "handle_${persona}_command" "$command" "$@"
            ;;
        *)
            error "Unknown persona: $persona"
            show_help
            exit 1
            ;;
    esac
}

# Execute main function with all command-line arguments
main "$@"
